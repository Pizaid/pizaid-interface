#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from Pizaid import ControllerService
from Pizaid.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string network_get_ipv4()'
  print '  string network_get_ipv6()'
  print '   storage_names()'
  print '  i64 storage_capacity_kb(string key)'
  print '  i64 storage_usage_kb(string key)'
  print '  byte storage_usage_percent(string key)'
  print '  bool storage_is_sync()'
  print '  bool storage_join(string key, string device)'
  print '  byte power_battery_percent()'
  print '  bool power_is_ac_plugin()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ControllerService.Client(protocol)
transport.open()

if cmd == 'network_get_ipv4':
  if len(args) != 0:
    print 'network_get_ipv4 requires 0 args'
    sys.exit(1)
  pp.pprint(client.network_get_ipv4())

elif cmd == 'network_get_ipv6':
  if len(args) != 0:
    print 'network_get_ipv6 requires 0 args'
    sys.exit(1)
  pp.pprint(client.network_get_ipv6())

elif cmd == 'storage_names':
  if len(args) != 0:
    print 'storage_names requires 0 args'
    sys.exit(1)
  pp.pprint(client.storage_names())

elif cmd == 'storage_capacity_kb':
  if len(args) != 1:
    print 'storage_capacity_kb requires 1 args'
    sys.exit(1)
  pp.pprint(client.storage_capacity_kb(args[0],))

elif cmd == 'storage_usage_kb':
  if len(args) != 1:
    print 'storage_usage_kb requires 1 args'
    sys.exit(1)
  pp.pprint(client.storage_usage_kb(args[0],))

elif cmd == 'storage_usage_percent':
  if len(args) != 1:
    print 'storage_usage_percent requires 1 args'
    sys.exit(1)
  pp.pprint(client.storage_usage_percent(args[0],))

elif cmd == 'storage_is_sync':
  if len(args) != 0:
    print 'storage_is_sync requires 0 args'
    sys.exit(1)
  pp.pprint(client.storage_is_sync())

elif cmd == 'storage_join':
  if len(args) != 2:
    print 'storage_join requires 2 args'
    sys.exit(1)
  pp.pprint(client.storage_join(args[0],args[1],))

elif cmd == 'power_battery_percent':
  if len(args) != 0:
    print 'power_battery_percent requires 0 args'
    sys.exit(1)
  pp.pprint(client.power_battery_percent())

elif cmd == 'power_is_ac_plugin':
  if len(args) != 0:
    print 'power_is_ac_plugin requires 0 args'
    sys.exit(1)
  pp.pprint(client.power_is_ac_plugin())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
